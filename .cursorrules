# 🏛️ ENOCHIAN GOVERNOR GENERATION PROJECT - CURSOR RULES

## **PROJECT OVERVIEW**
This is the Enochian Governor Generation system - a sophisticated AI-powered game engine that creates mystical storylines, challenges, and interactive experiences using authentic sacred wisdom from 18 mystical traditions.

### **CORE ARCHITECTURE**
```
🏛️ THE LIGHTHOUSE (Knowledge Base)
    ↓ feeds wisdom to ↓
👑 GOVERNOR ANGELS (91 Unique AI Entities) 
    ↓ generate ↓
🎮 GAME CONTENT (Storylines/Events/Challenges/Riddles)
    ↓ delivered through ↓  
🌐 INTERACTIVE EXPERIENCES (Web/Game Interfaces)
```

### **PROJECT COMPONENTS**
- **Lighthouse Knowledge Base**: 18 mystical traditions → 200+ knowledge entries
- **Governor Angel Personalities**: 91 unique entities with authentic mystical knowledge
- **Storyline Generation Engine**: Dynamic narrative creation system
- **Game Mechanics**: Tarot-based games, divination systems, ritual challenges
- **Web Interface**: Interactive mystical experiences and gameplay

## **DEVELOPMENT RULES**

### **💻 POWERSHELL COMMAND CHAINING**
- ✅ **ALWAYS use semicolons (;) for chaining PowerShell commands**
- ❌ **NEVER use && in PowerShell** (that's for bash/Unix)
- Example: `cd knowledge_base; python lighthouse_research.py; echo "Complete"`

### **🐍 PYTHON DEVELOPMENT**
- Use Python 3.9+ for all core development
- Follow PEP 8 styling conventions
- Always include comprehensive logging with timestamps
- Use dataclasses for structured data objects
- Implement async/await for API integrations

### **📁 FILE STRUCTURE ORGANIZATION**
```
governor_generator/
├── knowledge_base/          # THE LIGHTHOUSE (Wisdom traditions & research)
├── mystical_systems/        # Tarot, Kabbalah, Numerology engines  
├── governor_output/         # 91 Generated Governor Angel profiles
├── storyline_engine/        # Dynamic narrative generation
├── game_mechanics/          # Interactive game systems
├── unified_profiler/        # Governor personality integration
├── integration_layer/       # API coordinators & batch processing
└── canon/                  # Sacred source materials & references
```

### **🔗 API INTEGRATION GUIDELINES**
- Store all API keys in `.env` files (NEVER commit to git)
- Use rate limiting and retry logic for all external API calls
- Implement comprehensive error handling with logging
- Create mock/demo modes for testing without API usage
- Document API usage patterns and cost estimates

### **📚 KNOWLEDGE BASE STANDARDS**
- Treat all sacred wisdom with absolute cultural respect
- Verify authenticity of sources (Wikipedia primary, academic secondary)
- Maintain 500-1000 word entries optimized for blockchain storage
- Create cross-references between related mystical traditions
- Include cultural context and historical background

### **👑 GOVERNOR ANGEL GENERATION**
- Each of 91 governors must have unique personality traits
- Assign mystical specializations based on authentic traditions
- Create detailed backstories with Enochian names and lore
- Include personality flaws and growth arcs for compelling narratives
- Maintain consistency with established Enochian mythology

### **📖 STORYLINE CREATION STANDARDS**
- Generate dynamic, branching narrative trees
- Include moral dilemmas and philosophical challenges
- Create riddles and puzzles based on authentic mystical knowledge
- Ensure storylines respect the sacred nature of source material
- Build progressive difficulty and complexity curves

### **💾 CODING BEST PRACTICES**
- Use clear, descriptive variable and function names
- Write comprehensive docstrings for all functions/classes
- Implement unit tests for critical system components
- Use type hints throughout the codebase
- Follow the principle of single responsibility per function
- Include error handling and graceful degradation
- Optimize for both readability and performance

### **🎮 GAME MECHANICS REQUIREMENTS**
- Implement tarot-based decision systems with authentic card meanings
- Create divination challenges using I-Ching, runes, and other systems
- Build ritual-based puzzles respecting sacred practices
- Design progressive learning curves for mystical knowledge
- Include both solo and multiplayer interaction modes
- Ensure accessibility and inclusive design principles

### **🧪 TESTING & VALIDATION STANDARDS**
- Create comprehensive unit tests for all core systems
- Implement integration tests for API interactions
- Build demo modes for testing without external dependencies
- Validate cultural authenticity with subject matter experts
- Test scalability with full 91 governor generation
- Ensure cross-platform compatibility (Windows/Mac/Linux)

### **📦 DEPLOYMENT & DISTRIBUTION**
- Maintain separate development, staging, and production environments
- Use semantic versioning for all releases
- Create Docker containers for consistent deployment
- Implement CI/CD pipelines for automated testing
- Prepare blockchain-ready content for eternal preservation
- Document deployment procedures and dependencies

### **🔒 SECURITY & PRIVACY**
- Never commit API keys or sensitive credentials
- Implement secure authentication for admin features
- Validate all user inputs to prevent injection attacks
- Use HTTPS for all external communications
- Audit third-party dependencies for vulnerabilities
- Respect user privacy and data protection regulations

### **📝 DOCUMENTATION REQUIREMENTS**
- Maintain comprehensive README files for each component
- Create developer guides for extending the system
- Document all API endpoints and data structures
- Include mystical tradition references and authenticity notes
- Provide user guides for interactive features
- Keep technical architecture diagrams up to date

## **PROJECT-SPECIFIC COMMANDS**

### **🚀 COMMON DEVELOPMENT TASKS**
```powershell
# Navigate and test Lighthouse system
cd knowledge_base; python run_lighthouse_research.py --mode demo

# Generate governor profiles
cd governor_output; python batch_governor_generator.py

# Test storyline generation
cd storyline_engine; python enhanced_generator_v2.py --test

# Run mystical systems tests  
cd mystical_systems; python -m pytest tests/

# Build complete system
cd .; python build_complete_system.py; echo "Build complete"
```

### **⚡ QUICK DEVELOPMENT COMMANDS**
```powershell
# Full system test
python -m pytest tests/; echo "All tests complete"

# Update knowledge base
cd knowledge_base; python lighthouse_research_index.py; cd ..

# Generate new storylines
cd storyline_engine; python batch_storyline_generator.py; cd ..
```

---

**🏛️ REMEMBER: We are preserving humanity's sacred wisdom for eternity. Code with reverence, respect, and technical excellence. ⛓️✨** 